#+TITLE: Env parsing state machine
This was my first attempt at implementing state machine functionality to parse .env files. This is typically something highly needed in high level languages, C already has a built-in API for interracting with environment variables but only those that are inherited from the parent, not ones you can load from an .env file.

* Requirements
One build tool that I use constantly is [[https://command-not-found.com/cmake][cmake]]. Make sure that you have an up to date version, even though I do not use cmake to its full capabilities.

* Building
A build directory is required to dump all the build artifacts into. My personal preference to name the directory as =bin= for the sake of consistency.
#+begin_src bash
  BUILD_DIR=bin
  mkdir $BUILD_DIR
  cd $BUILD_DIR
  cmake ..
  make
#+end_src

* Documentation
- Any .env file to be loaded must have lines which are all formated =key=value= format. To load an .env file and print its key value pairs.
#+begin_src c
  struct env_t *env = parse_env(file_path);
  printf_env(*env);
#+end_src

- To verify that an env structure has a defined key.
#+begin_src c
  struct env_t *env = parse_env(file_path);
  ssize_t idx = has_key(env, "DB_HOST");
  if (idx == -1) {
    printf(":<\n");
  }
#+end_src
- Getting the value associated with the env variable =key=, one needs to define a =default value= in the case the key does not exist or the value is an empty string.
#+begin_src c
  struct env_t *env = parse_env(file_path);
  char *value = get(env, "key", "default_value");
  printf("value: %s\n", value);
#+end_src
